name: Deploy Applications

on:
  push:
    branches: [main]
    paths-ignore:
      - 'infra/**'
      - 'docs/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (prod only)'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ env.AZURE_CLIENT_ID }}","clientSecret":"${{ env.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ env.AZURE_TENANT_ID }}"}'

      - name: Get Azure resources and build images
        run: |
          # Set resource group
          RESOURCE_GROUP="rg-rythm-prod"
          
          # Get container registry
          REGISTRY_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          REGISTRY_LOGIN_SERVER=$(az acr show --name $REGISTRY_NAME --resource-group $RESOURCE_GROUP --query "loginServer" -o tsv)
          
          # Get Key Vault for secrets
          KEY_VAULT_NAME=$(az keyvault list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          
          echo "Building and pushing API image..."
          az acr build \
            --registry $REGISTRY_NAME \
            --image rythm-api:${{ github.sha }} \
            --image rythm-api:latest \
            --file ./apps/api/Dockerfile \
            .
          
          echo "Building and pushing Mobile image..."
          az acr build \
            --registry $REGISTRY_NAME \
            --image rythm-mobile:${{ github.sha }} \
            --image rythm-mobile:latest \
            --file ./apps/mobile/Dockerfile \
            .
          
          echo "Building and pushing Admin image..."
          az acr build \
            --registry $REGISTRY_NAME \
            --image rythm-admin:${{ github.sha }} \
            --image rythm-admin:latest \
            --file ./apps/admin/Dockerfile \
            .
          
          # Store values for later steps
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV
          echo "REGISTRY_LOGIN_SERVER=$REGISTRY_LOGIN_SERVER" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$KEY_VAULT_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV

      - name: Deploy all applications
        run: |
          # Get secrets from Key Vault
          POSTGRES_PASSWORD=$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "postgres-password" --query "value" -o tsv)
          JWT_SECRET=$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "jwt-secret" --query "value" -o tsv)
          
          # Get PostgreSQL host
          POSTGRES_HOST=$(az postgres flexible-server list --resource-group $RESOURCE_GROUP --query "[0].fullyQualifiedDomainName" -o tsv)
          
          # Get actual container app names (they have unique suffixes)
          API_APP_NAME=$(az containerapp list --resource-group $RESOURCE_GROUP --query "[?contains(name, 'api')].name" -o tsv)
          MOBILE_APP_NAME=$(az containerapp list --resource-group $RESOURCE_GROUP --query "[?contains(name, 'mobile')].name" -o tsv)
          ADMIN_APP_NAME=$(az containerapp list --resource-group $RESOURCE_GROUP --query "[?contains(name, 'admin')].name" -o tsv)
          
          echo "Deploying API container app: $API_APP_NAME"
          az containerapp update \
            --name $API_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $REGISTRY_LOGIN_SERVER/rythm-api:${{ github.sha }} \
            --set-env-vars \
              DATABASE_URL="postgresql://rythm_admin:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/rythm?sslmode=require" \
              JWT_SECRET="$JWT_SECRET" \
              NODE_ENV=production \
              PORT=3001
          
          # Get API FQDN for frontend apps
          API_FQDN=$(az containerapp show --name $API_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "Deploying Mobile container app: $MOBILE_APP_NAME"
          az containerapp update \
            --name $MOBILE_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $REGISTRY_LOGIN_SERVER/rythm-mobile:${{ github.sha }} \
            --set-env-vars \
              NEXT_PUBLIC_API_URL="https://$API_FQDN" \
              API_URL="https://$API_FQDN" \
              NODE_ENV=production
          
          echo "Deploying Admin container app: $ADMIN_APP_NAME"
          az containerapp update \
            --name $ADMIN_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $REGISTRY_LOGIN_SERVER/rythm-admin:${{ github.sha }} \
            --set-env-vars \
              NEXT_PUBLIC_API_URL="https://$API_FQDN" \
              API_URL="https://$API_FQDN" \
              NODE_ENV=production
          
          # Get frontend FQDNs for CORS configuration
          MOBILE_FQDN=$(az containerapp show --name $MOBILE_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          ADMIN_FQDN=$(az containerapp show --name $ADMIN_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "Updating API CORS configuration..."
          az containerapp update \
            --name $API_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --set-env-vars \
              CORS_ORIGIN="https://$MOBILE_FQDN,https://$ADMIN_FQDN"

      - name: Health checks
        run: |
          echo "Performing health checks..."
          
          # Get container app URLs
          API_URL=$(az containerapp show --name $API_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          MOBILE_URL=$(az containerapp show --name $MOBILE_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          ADMIN_URL=$(az containerapp show --name $ADMIN_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          
          # Test API health
          echo "Testing API at https://$API_URL/health"
          curl -f "https://$API_URL/health" || echo "‚ö†Ô∏è API health check failed"
          
          # Test Mobile app
          echo "Testing Mobile app at https://$MOBILE_URL"
          curl -f "https://$MOBILE_URL" || echo "‚ö†Ô∏è Mobile app health check failed"
          
          # Test Admin app  
          echo "Testing Admin app at https://$ADMIN_URL"
          curl -f "https://$ADMIN_URL" || echo "‚ö†Ô∏è Admin app health check failed"
          
          echo "‚úÖ Deployment completed successfully"
          echo "üåê API: https://$API_URL"
          echo "üì± Mobile: https://$MOBILE_URL"
          echo "üîß Admin: https://$ADMIN_URL"
